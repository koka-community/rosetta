import std/core/undiv
import std/os/readline

fun treesort(xs : list<string>, ?cmp: (string, string) -> e order) : e list<string>
  recur/treesort(xs, Nil)

fun recur/treesort(xs : list<string>, res : list<string>, ?cmp: (string, string) -> e order) : e list<string>
  match(xs)
    Cons(x, xx) ->
      val (lo, hi) = partition(x, xx)
      treesort(lo, Cons(x, treesort(hi, res.pretend-decreasing)).pretend-decreasing)
    Nil -> res

fun partition(^x : string, ys : list<string>, ?cmp: (string, string) -> e order)
  match(ys)
    Nil -> (Nil, Nil)
    Cons(y, yy) ->
      match ?cmp(y, x)
        Lt -> 
          val (lo, hi) = partition(x, yy)
          (Cons(y, lo), hi)
        _ -> 
          val (lo, hi) = partition(x, yy)
          (lo, Cons(y, hi))

effect ask
  fun ask(s1: string, s2: string): order

fun main()
  with handler
    fun ask(s1, s2)
      print("Is " ++ s1 ++ " <, =, or > " ++ s2 ++ "? ")
      var done := Nothing
      while {done.is-nothing}
        match readline()
          ">" -> done := Just(Gt)
          "<" -> done := Just(Lt)
          "=" -> done := Just(Eq)
          _ -> println("Invalid input")
      done.unjust
  ["violet", "red", "green", "indigo", "blue", "yellow", "orange"].treesort(?cmp=ask)